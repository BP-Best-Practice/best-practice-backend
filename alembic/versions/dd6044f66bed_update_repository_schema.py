"""update repository schema

Revision ID: dd6044f66bed
Revises: 
Create Date: 2025-08-30 22:05:30.710927

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dd6044f66bed'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    #op.drop_table('user')
    #op.drop_constraint(op.f('pr_generation_user_id_fkey'), 'pr_generation', type_='foreignkey')
    op.create_foreign_key(None, 'pr_generation', 'user_account', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('pr_template_user_id_fkey'), 'pr_template', type_='foreignkey')
    op.create_foreign_key(None, 'pr_template', 'user_account', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('repository', sa.Column('html_url', sa.Text(), nullable=True))
    op.add_column('repository', sa.Column('repo_created_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('repository', sa.Column('repo_updated_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('repository', sa.Column('repo_pushed_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('repository', sa.Column('archived', sa.Boolean(), nullable=True))
    op.drop_constraint(op.f('repository_user_id_fkey'), 'repository', type_='foreignkey')
    op.create_foreign_key(None, 'repository', 'user_account', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'repository', type_='foreignkey')
    #op.create_foreign_key(op.f('repository_user_id_fkey'), 'repository', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('repository', 'archived')
    op.drop_column('repository', 'repo_pushed_at')
    op.drop_column('repository', 'repo_updated_at')
    op.drop_column('repository', 'repo_created_at')
    op.drop_column('repository', 'html_url')
    op.drop_constraint(None, 'pr_template', type_='foreignkey')
    #op.create_foreign_key(op.f('pr_template_user_id_fkey'), 'pr_template', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'pr_generation', type_='foreignkey')
    #op.create_foreign_key(op.f('pr_generation_user_id_fkey'), 'pr_generation', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    # op.create_table('user',
    # sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    # sa.Column('github_id', sa.BIGINT(), autoincrement=False, nullable=False),
    # sa.Column('github_access_token', sa.TEXT(), autoincrement=False, nullable=False),
    # sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('subscription_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('monthly_usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    # sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('last_login_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    # sa.UniqueConstraint('github_id', name=op.f('user_github_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    # )
    # ### end Alembic commands ###
